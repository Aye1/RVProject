<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Api Arv: Tracker Class Reference</title>
<link href="style.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.4 -->
<div class="qindex"><a class="qindex" href="main.html">Main&nbsp;Page</a> | <a class="qindex" href="hierarchy.html">Class&nbsp;Hierarchy</a> | <a class="qindex" href="annotated.html">Class&nbsp;List</a> | <a class="qindex" href="dirs.html">Directories</a> | <a class="qindex" href="files.html">File&nbsp;List</a> | <a class="qindex" href="functions.html">Class&nbsp;Members</a></div>
<div class="nav">
<b>arv</b>::<a class="el" href="classarv_1_1Tracker.html">Tracker</a></div>
<h1>Tracker Class Reference</h1><!-- doxytag: class="arv::Tracker" -->Multiple markers tracking.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="Tracker_8h-source.html">ApiArv/Tracker.h</a>&gt;</code>
<p>
<a href="classarv_1_1Tracker-members.html">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarv_1_1Tracker.html#a0">~Tracker</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Frees ressources associated with this object.  <a href="#a0"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarv_1_1Tracker.html#a1">setThreshold</a> (int threshold)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Sets the detection threshold value.  <a href="#a1"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarv_1_1Tracker.html#a2">info</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Prints informations about this tracker on standard output.  <a href="#a2"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarv_1_1Tracker.html#a3">update</a> (const <a class="el" href="classarv_1_1Image.html">Image</a> &amp;image)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Updates tracking infos from input image.  <a href="#a3"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarv_1_1Tracker.html#a4">numMarkers</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the number of markers.  <a href="#a4"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarv_1_1Tracker.html#a5">isMarkerVisible</a> (int m)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Tells if a marker was found.  <a href="#a5"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarv_1_1Tracker.html#a6">markerSize</a> (int m) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the physical size of a marker.  <a href="#a6"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarv_1_1Tracker.html#a7">getPos</a> (int m, double transfo[3][4])</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the pose (position and orientation) of the specified detected marker.  <a href="#a7"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarv_1_1Tracker.html#a8">getInversePos</a> (int m, double transfo[3][4])</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the inverse pose of the specified detected marker.  <a href="#a8"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarv_1_1Tracker.html#a9">getRelativePos</a> (int marker, int markerRef, double transfo[3][4])</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the pose of the specified detected marker, relative to another detected marker.  <a href="#a9"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarv_1_1Tracker.html#a10">getGLModelMatrix</a> (int marker, double matrix[16])</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Gets the OpenGL model-view matrix corresponding to the specified detected marker.  <a href="#a10"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarv_1_1Tracker.html#a11">getGLProjectionMatrix</a> (float near, float far, double matrix[16])</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Gets the OpenGL projection matrix corresponding to the current camera (its intrinsic parameters).  <a href="#a11"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Static Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classarv_1_1Tracker.html">Tracker</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarv_1_1Tracker.html#e0">create</a> (const char *markerFile=NULL, int width=640, int height=480, const char *cameraFile=&quot;camera_para.dat&quot;, int threshold=100)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Creates and initializes a new instance.  <a href="#e0"></a><br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Multiple markers tracking. 
<p>
This class uses the ARToolkit Library to provide real-time tracking from video images. It allows to track the 6 degrees-of freedom from multiple trackers from a video stream.
<p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="a0"></a><!-- doxytag: member="arv::Tracker::~Tracker" ref="a0" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">~<a class="el" href="classarv_1_1Tracker.html">Tracker</a>           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Frees ressources associated with this object. 
<p>
    </td>
  </tr>
</table>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="e0"></a><!-- doxytag: member="arv::Tracker::create" ref="e0" args="(const char *markerFile=NULL, int width=640, int height=480, const char *cameraFile=&quot;camera_para.dat&quot;, int threshold=100)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classarv_1_1Tracker.html">Tracker</a> * create           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>markerFile</em> = <code>NULL</code>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>width</em> = <code>640</code>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>height</em> = <code>480</code>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>cameraFile</em> = <code>&quot;camera_para.dat&quot;</code>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>threshold</em> = <code>100</code></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [static]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Creates and initializes a new instance. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>markerFile</em>&nbsp;</td><td>the file name for markers data. If <code>NULL</code> is given, a single marker (<code>"patt.hiro"</code>) is used. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>width</em>&nbsp;</td><td>width of the video stream </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>height</em>&nbsp;</td><td>height of the video stream </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>cameraFile</em>&nbsp;</td><td>the file name for camera calibration data. If <code>NULL</code> is given, the default file <code>"camera_para.dat"</code> is used. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>threshold</em>&nbsp;</td><td>the threshold used to decide wether a marker can be considered to be detected or not. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>the newly created tracker or <code>NULL</code> if some error occured.</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a10"></a><!-- doxytag: member="arv::Tracker::getGLModelMatrix" ref="a10" args="(int marker, double matrix[16])" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void getGLModelMatrix           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap> <em>marker</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>double&nbsp;</td>
          <td class="mdname" nowrap> <em>matrix</em>[16]</td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Gets the OpenGL model-view matrix corresponding to the specified detected marker. 
<p>
The matrix obtained this way can be used in OpenGL calls: <div class="fragment"><pre class="fragment">  glMatrixMode(GL_MODELVIEW);
  glLoadMatrixd(matrix);
</pre></div> <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>marker</em>&nbsp;</td><td>the index of the marker </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>matrix</em>&nbsp;</td><td>takes the matrix corresponding to the pose of the specified marker if detected, in the format of an OpenGL model(view) matrix.</td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a11"></a><!-- doxytag: member="arv::Tracker::getGLProjectionMatrix" ref="a11" args="(float near, float far, double matrix[16])" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void getGLProjectionMatrix           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">float&nbsp;</td>
          <td class="mdname" nowrap> <em>near</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>float&nbsp;</td>
          <td class="mdname" nowrap> <em>far</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>double&nbsp;</td>
          <td class="mdname" nowrap> <em>matrix</em>[16]</td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Gets the OpenGL projection matrix corresponding to the current camera (its intrinsic parameters). 
<p>
The matrix obtained this way can be used in OpenGL calls: <div class="fragment"><pre class="fragment">  glMatrixMode(GL_PROJECTION);
  glLoadMatrixd(matrix);
</pre></div> <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>near</em>&nbsp;</td><td>distance to the near plane of the projection matrix </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>far</em>&nbsp;</td><td>distance to the far plane of the projection matrix </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>matrix</em>&nbsp;</td><td>takes the matrix corresponding to the intrinsic parameters of the camera associated with this tracker, in the format of an OpenGL projection matrix.</td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a8"></a><!-- doxytag: member="arv::Tracker::getInversePos" ref="a8" args="(int m, double transfo[3][4])" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void getInversePos           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap> <em>m</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>double&nbsp;</td>
          <td class="mdname" nowrap> <em>transfo</em>[3][4]</td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Returns the inverse pose of the specified detected marker. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>m</em>&nbsp;</td><td>the index of the marker </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>transfo</em>&nbsp;</td><td>takes the value of the inverse pose of the marker, if detected. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Warning:</b></dt><dd>undefined behavior if the specified marker was not detected.</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a7"></a><!-- doxytag: member="arv::Tracker::getPos" ref="a7" args="(int m, double transfo[3][4])" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void getPos           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap> <em>m</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>double&nbsp;</td>
          <td class="mdname" nowrap> <em>transfo</em>[3][4]</td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Returns the pose (position and orientation) of the specified detected marker. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>m</em>&nbsp;</td><td>the index of the marker. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>transfo</em>&nbsp;</td><td>takes the value of the pose of the marker relative to the camera, if detected. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>the position and orientation of the specified if detected. </dd></dl>
<dl compact><dt><b>Warning:</b></dt><dd>undefined behavior if the specified marker was not detected.</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a9"></a><!-- doxytag: member="arv::Tracker::getRelativePos" ref="a9" args="(int marker, int markerRef, double transfo[3][4])" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void getRelativePos           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap> <em>marker</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>markerRef</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>double&nbsp;</td>
          <td class="mdname" nowrap> <em>transfo</em>[3][4]</td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Returns the pose of the specified detected marker, relative to another detected marker. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>marker</em>&nbsp;</td><td>the index of the marker </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>markerRef</em>&nbsp;</td><td>the index of the reference marker </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>transfo</em>&nbsp;</td><td>takes the value of the relative pose of the marker, if both markers detected. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Warning:</b></dt><dd>undefined behavior if the specified markers were not detected.</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a2"></a><!-- doxytag: member="arv::Tracker::info" ref="a2" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void info           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Prints informations about this tracker on standard output. 
<p>
    </td>
  </tr>
</table>
<a class="anchor" name="a5"></a><!-- doxytag: member="arv::Tracker::isMarkerVisible" ref="a5" args="(int m)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">bool isMarkerVisible           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>m</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Tells if a marker was found. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>m</em>&nbsp;</td><td>index of the marker to query. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>true if the marker was visible, false else.</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a6"></a><!-- doxytag: member="arv::Tracker::markerSize" ref="a6" args="(int m) const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">float markerSize           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>m</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Returns the physical size of a marker. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>m</em>&nbsp;</td><td>index of the marker to query. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>the size (in world space) of the specified marker.</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a4"></a><!-- doxytag: member="arv::Tracker::numMarkers" ref="a4" args="() const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int numMarkers           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const<code> [inline]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Returns the number of markers. 
<p>
<dl compact><dt><b>Returns:</b></dt><dd>the number of markers tracked by this tracker.</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a1"></a><!-- doxytag: member="arv::Tracker::setThreshold" ref="a1" args="(int threshold)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void setThreshold           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>threshold</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Sets the detection threshold value. 
<p>
    </td>
  </tr>
</table>
<a class="anchor" name="a3"></a><!-- doxytag: member="arv::Tracker::update" ref="a3" args="(const Image &amp;image)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">bool update           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="classarv_1_1Image.html">Image</a> &amp;&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>image</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Updates tracking infos from input image. 
<p>
This method needs to be called each time the input video stream is updated. It recomputes the poses for detected markers on the new image. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>image</em>&nbsp;</td><td>the input image. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>true on success, false if some error occured.</dd></dl>
    </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="Tracker_8h-source.html">Tracker.h</a><li>Tracker.cpp</ul>
<hr size="1"><address style="align: right;"><small>Generated on Fri Nov 14 21:45:30 2008 for Api Arv by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.4 </small></address>
</body>
</html>
