<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Api Arv: Thread Class Reference</title>
<link href="style.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.4 -->
<div class="qindex"><a class="qindex" href="main.html">Main&nbsp;Page</a> | <a class="qindex" href="hierarchy.html">Class&nbsp;Hierarchy</a> | <a class="qindex" href="annotated.html">Class&nbsp;List</a> | <a class="qindex" href="dirs.html">Directories</a> | <a class="qindex" href="files.html">File&nbsp;List</a> | <a class="qindex" href="functions.html">Class&nbsp;Members</a></div>
<div class="nav">
<b>arv</b>::<a class="el" href="classarv_1_1Thread.html">Thread</a></div>
<h1>Thread Class Reference</h1><!-- doxytag: class="arv::Thread" -->This class allows to execute multiple threads.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="Thread_8h-source.html">ApiArv/Thread.h</a>&gt;</code>
<p>
<a href="classarv_1_1Thread-members.html">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarv_1_1Thread.html#a0">join</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Waits for this thread to end.  <a href="#a0"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarv_1_1Thread.html#a1">kill</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Kills this thread.  <a href="#a1"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Static Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classarv_1_1Thread.html">Thread</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarv_1_1Thread.html#e0">create</a> (<a class="el" href="classarv_1_1Runnable.html">Runnable</a> *runnable)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Creates and starts a new thread from a <code><a class="el" href="classarv_1_1Runnable.html">Runnable</a></code> object.  <a href="#e0"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static <a class="el" href="classarv_1_1Thread.html">Thread</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarv_1_1Thread.html#e1">create</a> (void *(*run)(void *), void *arg=NULL)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Creates and starts a new thread.  <a href="#e1"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarv_1_1Thread.html#e2">exit</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Exits the thread from which this function was called.  <a href="#e2"></a><br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
This class allows to execute multiple threads. 
<p>
A thread is created and executed when one of the <code><a class="el" href="classarv_1_1Thread.html#e0">create()</a></code> static methods is called. A simple way to run multiple processes into different threads is to extend the class <code><a class="el" href="classarv_1_1Runnable.html">Runnable</a>:</code> <div class="fragment"><pre class="fragment">  <span class="keyword">class </span>MyProcess1 : <span class="keyword">public</span> Runnable {
      <span class="keyword">public</span>:
          <span class="keywordtype">void</span> run() {
              ... <span class="comment">// process 1</span>
              }
      };

  <span class="keyword">class </span>MyProcess2 : <span class="keyword">public</span> Runnable {
      <span class="keyword">public</span>:
          <span class="keywordtype">void</span> run() {
              ... <span class="comment">// process 2</span>
              }
      };

  Runnable *proc1 = <span class="keyword">new</span> MyProcess1();
  Runnable *proc2 = <span class="keyword">new</span> MyProcess2();
  Thread *thread1 = <span class="keyword">new</span> Thread(proc1);
  Thread *thread2 = <span class="keyword">new</span> Thread(proc2);
  <span class="keywordflow">if</span> (thread1 == NULL || thread2 == NULL) error();
  <span class="comment">// the two processes are run</span>
  thread1.join();
  thread2.join();
  <span class="comment">// at this point the two processes are terminated.</span>
</pre></div>
<p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="e1"></a><!-- doxytag: member="arv::Thread::create" ref="e1" args="(void *(*run)(void *), void *arg=NULL)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classarv_1_1Thread.html">Thread</a> * create           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">void *(*)(void *)&nbsp;</td>
          <td class="mdname" nowrap> <em>run</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>void *&nbsp;</td>
          <td class="mdname" nowrap> <em>arg</em> = <code>NULL</code></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [static]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Creates and starts a new thread. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>run</em>&nbsp;</td><td>the function to run. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>arg</em>&nbsp;</td><td>the arguments for the function <code>run</code>. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>The created thread or NULL if an error occured.</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="e0"></a><!-- doxytag: member="arv::Thread::create" ref="e0" args="(Runnable *runnable)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="classarv_1_1Thread.html">Thread</a> * create           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="classarv_1_1Runnable.html">Runnable</a> *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>runnable</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [static]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Creates and starts a new thread from a <code><a class="el" href="classarv_1_1Runnable.html">Runnable</a></code> object. 
<p>
Once the thread is created, the <code>run()</code> method of <code>runnable</code> is called. <dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>runnable</em>&nbsp;</td><td>the object to run on this thread. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>The created thread or NULL if an error occured.</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="e2"></a><!-- doxytag: member="arv::Thread::exit" ref="e2" args="()" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void exit           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [static]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Exits the thread from which this function was called. 
<p>
    </td>
  </tr>
</table>
<a class="anchor" name="a0"></a><!-- doxytag: member="arv::Thread::join" ref="a0" args="() const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">bool join           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Waits for this thread to end. 
<p>
The calling thread will be locked at that point until this thread ends. <dl compact><dt><b>Returns:</b></dt><dd>True iff the thread joined correctly.</dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a1"></a><!-- doxytag: member="arv::Thread::kill" ref="a1" args="() const " --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">bool kill           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap> const</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Kills this thread. 
<p>
<dl compact><dt><b>Returns:</b></dt><dd>True iff the thread was killed correctly.</dd></dl>
    </td>
  </tr>
</table>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="Thread_8h-source.html">Thread.h</a><li>Thread.cpp</ul>
<hr size="1"><address style="align: right;"><small>Generated on Fri Nov 14 21:45:30 2008 for Api Arv by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.4 </small></address>
</body>
</html>
