<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>libnifalcon: libnifalcon::FalconKinematic Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.9 -->
<script type="text/javascript">
<!--
function changeDisplayState (e){
  var num=this.id.replace(/[^[0-9]/g,'');
  var button=this.firstChild;
  var sectionDiv=document.getElementById('dynsection'+num);
  if (sectionDiv.style.display=='none'||sectionDiv.style.display==''){
    sectionDiv.style.display='block';
    button.src='open.gif';
  }else{
    sectionDiv.style.display='none';
    button.src='closed.gif';
  }
}
function initDynSections(){
  var divs=document.getElementsByTagName('div');
  var sectionCounter=1;
  for(var i=0;i<divs.length-1;i++){
    if(divs[i].className=='dynheader'&&divs[i+1].className=='dynsection'){
      var header=divs[i];
      var section=divs[i+1];
      var button=header.firstChild;
      if (button!='IMG'){
        divs[i].insertBefore(document.createTextNode(' '),divs[i].firstChild);
        button=document.createElement('img');
        divs[i].insertBefore(button,divs[i].firstChild);
      }
      header.style.cursor='pointer';
      header.onclick=changeDisplayState;
      header.id='dynheader'+sectionCounter;
      button.src='closed.gif';
      section.id='dynsection'+sectionCounter;
      section.style.display='none';
      section.style.marginLeft='14px';
      sectionCounter++;
    }
  }
}
window.onload = initDynSections;
-->
</script>
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="main.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.html"><span>Classes</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.html"><span>Class&nbsp;List</span></a></li>
      <li><a href="hierarchy.html"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.html"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="namespacelibnifalcon.html">libnifalcon</a>::<a class="el" href="classlibnifalcon_1_1_falcon_kinematic.html">FalconKinematic</a>
  </div>
</div>
<div class="contents">
<h1>libnifalcon::FalconKinematic Class Reference<br>
<small>
[<a class="el" href="group___core_classes.html">Core Classes</a>,&nbsp;<a class="el" href="group___kinematics_classes.html">Kinematics Classes</a>]</small>
</h1><!-- doxytag: class="libnifalcon::FalconKinematic" --><!-- doxytag: inherits="libnifalcon::FalconCore" --><code>#include &lt;FalconKinematic.h&gt;</code>
<p>
Inherits <a class="el" href="classlibnifalcon_1_1_falcon_core.html">libnifalcon::FalconCore</a>.
<p>
Inherited by <a class="el" href="classlibnifalcon_1_1_falcon_kinematic_stamper.html">libnifalcon::FalconKinematicStamper</a>.
<p>
<div class="dynheader">
Collaboration diagram for libnifalcon::FalconKinematic:</div>
<div class="dynsection">
<p><center><img src="classlibnifalcon_1_1_falcon_kinematic__coll__graph.png" border="0" usemap="#libnifalcon_1_1_falcon_kinematic__coll__map" alt="Collaboration graph"></center>
<map name="libnifalcon_1_1_falcon_kinematic__coll__map">
<area shape="rect" href="classlibnifalcon_1_1_falcon_core.html" title="libnifalcon::FalconCore" alt="" coords="23,7,193,33"></map>
<center><font size="2">[<a target="top" href="graph_legend.html">legend</a>]</font></center></div>

<p>
<a href="classlibnifalcon_1_1_falcon_kinematic-members.html">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Types</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">enum &nbsp;</td><td class="memItemRight" valign="bottom">{ <a class="el" href="classlibnifalcon_1_1_falcon_kinematic.html#057f16cb8e8f379f74a514e61ef67ba190b4c30078c7974a60803c30a27e8556">FALCON_KINEMATIC_OUT_OF_RANGE</a> =  5000
 }</td></tr>

<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_kinematic.html#68549a297fb163cdeb810b1375b3d289">FalconKinematic</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_kinematic.html#610034b74a68cd90ff5b6fc286c00880">~FalconKinematic</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">double&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_kinematic.html#4ba9363082a505caa651beee1efa875b">getTheta</a> (int encoder_value)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_kinematic.html#de3e425a89dcfaa81f166010ddaae625">getAngles</a> (boost::array&lt; double, 3 &gt; &amp;position, boost::array&lt; double, 3 &gt; &amp;angles)=0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_kinematic.html#24f2e1b6b40039c41ab2e00f7a20721c">getPosition</a> (boost::array&lt; int, 3 &gt; &amp;encoders, boost::array&lt; double, 3 &gt; &amp;position)=0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_kinematic.html#0fa4e89bd22a30c391cb643e189a33e5">getWorkspaceOrigin</a> (boost::array&lt; double, 3 &gt; &amp;origin)=0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_kinematic.html#dd2a730c7e0023f08a062d5f28e49459">getForces</a> (const boost::array&lt; double, 3 &gt; &amp;position, const boost::array&lt; double, 3 &gt; &amp;cart_force, boost::array&lt; int, 3 &gt; &amp;enc_force)=0</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
The Kinematic base class provides virtual functions for forward and inverse kinematic functions, as well as utility functions that all kinematics cores can share. <hr><h2>Member Enumeration Documentation</h2>
<a class="anchor" name="057f16cb8e8f379f74a514e61ef67ba1"></a><!-- doxytag: member="libnifalcon::FalconKinematic::@7" ref="057f16cb8e8f379f74a514e61ef67ba1" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">anonymous enum          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl compact><dt><b>Enumerator: </b></dt><dd>
<table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" name="057f16cb8e8f379f74a514e61ef67ba190b4c30078c7974a60803c30a27e8556"></a><!-- doxytag: member="FALCON_KINEMATIC_OUT_OF_RANGE" ref="057f16cb8e8f379f74a514e61ef67ba190b4c30078c7974a60803c30a27e8556" args="" -->FALCON_KINEMATIC_OUT_OF_RANGE</em>&nbsp;</td><td>
Returned if value requested is out of workspace range </td></tr>
</table>
</dl>

</div>
</div><p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="68549a297fb163cdeb810b1375b3d289"></a><!-- doxytag: member="libnifalcon::FalconKinematic::FalconKinematic" ref="68549a297fb163cdeb810b1375b3d289" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">libnifalcon::FalconKinematic::FalconKinematic           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Constructor 
</div>
</div><p>
<a class="anchor" name="610034b74a68cd90ff5b6fc286c00880"></a><!-- doxytag: member="libnifalcon::FalconKinematic::~FalconKinematic" ref="610034b74a68cd90ff5b6fc286c00880" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual libnifalcon::FalconKinematic::~FalconKinematic           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Destructor 
</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="de3e425a89dcfaa81f166010ddaae625"></a><!-- doxytag: member="libnifalcon::FalconKinematic::getAngles" ref="de3e425a89dcfaa81f166010ddaae625" args="(boost::array&lt; double, 3 &gt; &amp;position, boost::array&lt; double, 3 &gt; &amp;angles)=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool libnifalcon::FalconKinematic::getAngles           </td>
          <td>(</td>
          <td class="paramtype">boost::array&lt; double, 3 &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>position</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">boost::array&lt; double, 3 &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>angles</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Given a caretesian position (in meters), return the angle of the legs requires to achieve the positions<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>position</em>&nbsp;</td><td>Position to get the angles for (in cartesian coordinates, meters) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>angles</em>&nbsp;</td><td>Array to write result into</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if angles are found, false otherwise (i.e. position out of workspace range) </dd></dl>

<p>Implemented in <a class="el" href="classlibnifalcon_1_1_falcon_kinematic_stamper.html#a050c84b4bd0df2e645699da40875f1c">libnifalcon::FalconKinematicStamper</a>.</p>

</div>
</div><p>
<a class="anchor" name="dd2a730c7e0023f08a062d5f28e49459"></a><!-- doxytag: member="libnifalcon::FalconKinematic::getForces" ref="dd2a730c7e0023f08a062d5f28e49459" args="(const boost::array&lt; double, 3 &gt; &amp;position, const boost::array&lt; double, 3 &gt; &amp;cart_force, boost::array&lt; int, 3 &gt; &amp;enc_force)=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool libnifalcon::FalconKinematic::getForces           </td>
          <td>(</td>
          <td class="paramtype">const boost::array&lt; double, 3 &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>position</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const boost::array&lt; double, 3 &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>cart_force</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">boost::array&lt; int, 3 &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>enc_force</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Given a caretesian position (in meters), and force vector (in newtons), return the force values that need to be sent to the firmware. Force values are capped at 4096.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>position</em>&nbsp;</td><td>Current position of the end effector </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>cart_force</em>&nbsp;</td><td>Force vector to apply to the end effector </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>enc_force</em>&nbsp;</td><td>Force to be sent to the firmware</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if forces are generated, false otherwise. </dd></dl>

<p>Implemented in <a class="el" href="classlibnifalcon_1_1_falcon_kinematic_stamper.html#68d30ae5a7f0b99e8a224419126de66d">libnifalcon::FalconKinematicStamper</a>.</p>

</div>
</div><p>
<a class="anchor" name="24f2e1b6b40039c41ab2e00f7a20721c"></a><!-- doxytag: member="libnifalcon::FalconKinematic::getPosition" ref="24f2e1b6b40039c41ab2e00f7a20721c" args="(boost::array&lt; int, 3 &gt; &amp;encoders, boost::array&lt; double, 3 &gt; &amp;position)=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool libnifalcon::FalconKinematic::getPosition           </td>
          <td>(</td>
          <td class="paramtype">boost::array&lt; int, 3 &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>encoders</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">boost::array&lt; double, 3 &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>position</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Given a set of encoder values, return the cartesian position (in meters) of the end effector in relation to the origin. Note: Origin subject to change based on kinematics system. Use the workspaceOrigin() function to get what the system thinks its origin is.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>encoders</em>&nbsp;</td><td>Encoder values for the 3 legs </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>position</em>&nbsp;</td><td>Array to write result into</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>true if angles are found, false otherwise (i.e. position out of workspace range) </dd></dl>

<p>Implemented in <a class="el" href="classlibnifalcon_1_1_falcon_kinematic_stamper.html#c8aa177bbeb20adfb565b4bff3a02096">libnifalcon::FalconKinematicStamper</a>.</p>

</div>
</div><p>
<a class="anchor" name="4ba9363082a505caa651beee1efa875b"></a><!-- doxytag: member="libnifalcon::FalconKinematic::getTheta" ref="4ba9363082a505caa651beee1efa875b" args="(int encoder_value)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double libnifalcon::FalconKinematic::getTheta           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>encoder_value</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Given an encoder value, return the angle (in degrees) the leg is at (in the leg's local reference frame)<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>encoder_value</em>&nbsp;</td><td>Encoder ticks for a leg</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Angle (in degrees) the leg is at </dd></dl>

</div>
</div><p>
<a class="anchor" name="0fa4e89bd22a30c391cb643e189a33e5"></a><!-- doxytag: member="libnifalcon::FalconKinematic::getWorkspaceOrigin" ref="0fa4e89bd22a30c391cb643e189a33e5" args="(boost::array&lt; double, 3 &gt; &amp;origin)=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void libnifalcon::FalconKinematic::getWorkspaceOrigin           </td>
          <td>(</td>
          <td class="paramtype">boost::array&lt; double, 3 &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>origin</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the center point of the workspace. May not always be [0,0,0].<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>origin</em>&nbsp;</td><td>Array to store values in </td></tr>
  </table>
</dl>

<p>Implemented in <a class="el" href="classlibnifalcon_1_1_falcon_kinematic_stamper.html#5291e355612ed013edd6f0d0c5d82a04">libnifalcon::FalconKinematicStamper</a>.</p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following file:<ul>
<li>local/libnifalcon-1.0.1/include/falcon/core/<a class="el" href="_falcon_kinematic_8h.html">FalconKinematic.h</a></ul>
</div>
<hr size="1"><address style="text-align: right;"><small>Generated on Sun Sep 20 12:24:30 2009 for libnifalcon by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.9 </small></address>
</body>
</html>
