<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>libnifalcon: libnifalcon::FalconDeviceBoostThread Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.9 -->
<script type="text/javascript">
<!--
function changeDisplayState (e){
  var num=this.id.replace(/[^[0-9]/g,'');
  var button=this.firstChild;
  var sectionDiv=document.getElementById('dynsection'+num);
  if (sectionDiv.style.display=='none'||sectionDiv.style.display==''){
    sectionDiv.style.display='block';
    button.src='open.gif';
  }else{
    sectionDiv.style.display='none';
    button.src='closed.gif';
  }
}
function initDynSections(){
  var divs=document.getElementsByTagName('div');
  var sectionCounter=1;
  for(var i=0;i<divs.length-1;i++){
    if(divs[i].className=='dynheader'&&divs[i+1].className=='dynsection'){
      var header=divs[i];
      var section=divs[i+1];
      var button=header.firstChild;
      if (button!='IMG'){
        divs[i].insertBefore(document.createTextNode(' '),divs[i].firstChild);
        button=document.createElement('img');
        divs[i].insertBefore(button,divs[i].firstChild);
      }
      header.style.cursor='pointer';
      header.onclick=changeDisplayState;
      header.id='dynheader'+sectionCounter;
      button.src='closed.gif';
      section.id='dynsection'+sectionCounter;
      section.style.display='none';
      section.style.marginLeft='14px';
      sectionCounter++;
    }
  }
}
window.onload = initDynSections;
-->
</script>
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="main.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.html"><span>Classes</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.html"><span>Class&nbsp;List</span></a></li>
      <li><a href="hierarchy.html"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.html"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="namespacelibnifalcon.html">libnifalcon</a>::<a class="el" href="classlibnifalcon_1_1_falcon_device_boost_thread.html">FalconDeviceBoostThread</a>
  </div>
</div>
<div class="contents">
<h1>libnifalcon::FalconDeviceBoostThread Class Reference<br>
<small>
[<a class="el" href="group___utility_classes.html">Utility Classes</a>]</small>
</h1><!-- doxytag: class="libnifalcon::FalconDeviceBoostThread" --><!-- doxytag: inherits="libnifalcon::FalconDevice" --><code>#include &lt;FalconDeviceBoostThread.h&gt;</code>
<p>
Inherits <a class="el" href="classlibnifalcon_1_1_falcon_device.html">libnifalcon::FalconDevice</a>.
<p>
<div class="dynheader">
Collaboration diagram for libnifalcon::FalconDeviceBoostThread:</div>
<div class="dynsection">
<p><center><img src="classlibnifalcon_1_1_falcon_device_boost_thread__coll__graph.png" border="0" usemap="#libnifalcon_1_1_falcon_device_boost_thread__coll__map" alt="Collaboration graph"></center>
<map name="libnifalcon_1_1_falcon_device_boost_thread__coll__map">
<area shape="rect" href="classlibnifalcon_1_1_falcon_device.html" title="libnifalcon::FalconDevice" alt="" coords="48,84,235,111"><area shape="rect" href="classlibnifalcon_1_1_falcon_core.html" title="libnifalcon::FalconCore" alt="" coords="56,7,227,33"></map>
<center><font size="2">[<a target="top" href="graph_legend.html">legend</a>]</font></center></div>

<p>
<a href="classlibnifalcon_1_1_falcon_device_boost_thread-members.html">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_device_boost_thread.html#2148d575ab4c8d91050719220c915556">FalconDeviceBoostThread</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_device_boost_thread.html#4cd3f0078f63f551e168ef30c6abcee9">~FalconDeviceBoostThread</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_device_boost_thread.html#66b7b963addcbf5e80720dfd9f1bd2a8">startThread</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_device_boost_thread.html#9b46f964050fee29b5ddcfc52a0e2fc7">runThreadLoop</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_device_boost_thread.html#7d53ced0e879071c709fe47307c76bac">stopThread</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_device_boost_thread.html#cb43f9dfc7e1d367fa7f646a4f001441">isThreadRunning</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_device_boost_thread.html#39d929f68cc1102edd3aee6ea9421b34">getPosition</a> (boost::array&lt; double, 3 &gt; &amp;pos)</td></tr>

<tr><td colspan="2"><br><h2>Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_device_boost_thread.html#5ca573067a222c6a1ea58d167cf35a9f">runDeviceComm</a> ()</td></tr>

<tr><td colspan="2"><br><h2>Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">boost::shared_ptr&lt; boost::thread &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_device_boost_thread.html#b8c8551feea8c479721493a14b6d7407">m_ioThread</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">boost::array&lt; double, 3 &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_device_boost_thread.html#368a6a9e73e303b8e60ce3bb10f11303">m_localPosition</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_device_boost_thread.html#2c7bbdc24184923b9a65e143fdb387af">m_runThreadLoop</a></td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
The <a class="el" href="classlibnifalcon_1_1_falcon_device_boost_thread.html">FalconDeviceBoostThread</a> class is a sample device that uses the boost::thread class to run the communications loop to the falcon.<p>
The <a class="el" href="classlibnifalcon_1_1_falcon_device_boost_thread.html">FalconDeviceBoostThread</a> class is only available if the boost::thread library is available on the system. <hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="2148d575ab4c8d91050719220c915556"></a><!-- doxytag: member="libnifalcon::FalconDeviceBoostThread::FalconDeviceBoostThread" ref="2148d575ab4c8d91050719220c915556" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">libnifalcon::FalconDeviceBoostThread::FalconDeviceBoostThread           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Constructor 
</div>
</div><p>
<a class="anchor" name="4cd3f0078f63f551e168ef30c6abcee9"></a><!-- doxytag: member="libnifalcon::FalconDeviceBoostThread::~FalconDeviceBoostThread" ref="4cd3f0078f63f551e168ef30c6abcee9" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">libnifalcon::FalconDeviceBoostThread::~FalconDeviceBoostThread           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Destructor 
</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="39d929f68cc1102edd3aee6ea9421b34"></a><!-- doxytag: member="libnifalcon::FalconDeviceBoostThread::getPosition" ref="39d929f68cc1102edd3aee6ea9421b34" args="(boost::array&lt; double, 3 &gt; &amp;pos)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void libnifalcon::FalconDeviceBoostThread::getPosition           </td>
          <td>(</td>
          <td class="paramtype">boost::array&lt; double, 3 &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>pos</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Thread safe position return 
</div>
</div><p>
<a class="anchor" name="cb43f9dfc7e1d367fa7f646a4f001441"></a><!-- doxytag: member="libnifalcon::FalconDeviceBoostThread::isThreadRunning" ref="cb43f9dfc7e1d367fa7f646a4f001441" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool libnifalcon::FalconDeviceBoostThread::isThreadRunning           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Thread run status<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if running, false otherwise </dd></dl>

</div>
</div><p>
<a class="anchor" name="5ca573067a222c6a1ea58d167cf35a9f"></a><!-- doxytag: member="libnifalcon::FalconDeviceBoostThread::runDeviceComm" ref="5ca573067a222c6a1ea58d167cf35a9f" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void libnifalcon::FalconDeviceBoostThread::runDeviceComm           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Wrapper function for dealing with device communication 
</div>
</div><p>
<a class="anchor" name="9b46f964050fee29b5ddcfc52a0e2fc7"></a><!-- doxytag: member="libnifalcon::FalconDeviceBoostThread::runThreadLoop" ref="9b46f964050fee29b5ddcfc52a0e2fc7" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void libnifalcon::FalconDeviceBoostThread::runThreadLoop           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Runs IO loop. Overridden to implement application specific functionality 
</div>
</div><p>
<a class="anchor" name="66b7b963addcbf5e80720dfd9f1bd2a8"></a><!-- doxytag: member="libnifalcon::FalconDeviceBoostThread::startThread" ref="66b7b963addcbf5e80720dfd9f1bd2a8" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void libnifalcon::FalconDeviceBoostThread::startThread           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Starts a thread that runs <a class="el" href="classlibnifalcon_1_1_falcon_device.html#1a523c81e563f163b1a45f2371e27da5">FalconDevice::runIOLoop</a> constantly 
</div>
</div><p>
<a class="anchor" name="7d53ced0e879071c709fe47307c76bac"></a><!-- doxytag: member="libnifalcon::FalconDeviceBoostThread::stopThread" ref="7d53ced0e879071c709fe47307c76bac" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void libnifalcon::FalconDeviceBoostThread::stopThread           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Stops thread if running 
</div>
</div><p>
<hr><h2>Member Data Documentation</h2>
<a class="anchor" name="b8c8551feea8c479721493a14b6d7407"></a><!-- doxytag: member="libnifalcon::FalconDeviceBoostThread::m_ioThread" ref="b8c8551feea8c479721493a14b6d7407" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">boost::shared_ptr&lt;boost::thread&gt; <a class="el" href="classlibnifalcon_1_1_falcon_device_boost_thread.html#b8c8551feea8c479721493a14b6d7407">libnifalcon::FalconDeviceBoostThread::m_ioThread</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Internal thread object 
</div>
</div><p>
<a class="anchor" name="368a6a9e73e303b8e60ce3bb10f11303"></a><!-- doxytag: member="libnifalcon::FalconDeviceBoostThread::m_localPosition" ref="368a6a9e73e303b8e60ce3bb10f11303" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">boost::array&lt;double, 3&gt; <a class="el" href="classlibnifalcon_1_1_falcon_device_boost_thread.html#368a6a9e73e303b8e60ce3bb10f11303">libnifalcon::FalconDeviceBoostThread::m_localPosition</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Internal position storage 
</div>
</div><p>
<a class="anchor" name="2c7bbdc24184923b9a65e143fdb387af"></a><!-- doxytag: member="libnifalcon::FalconDeviceBoostThread::m_runThreadLoop" ref="2c7bbdc24184923b9a65e143fdb387af" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classlibnifalcon_1_1_falcon_device_boost_thread.html#2c7bbdc24184923b9a65e143fdb387af">libnifalcon::FalconDeviceBoostThread::m_runThreadLoop</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Internal thread execution state. Thread loop exits if this is false. 
</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li>local/libnifalcon-1.0.1/include/falcon/util/<a class="el" href="_falcon_device_boost_thread_8h.html">FalconDeviceBoostThread.h</a><li>local/libnifalcon-1.0.1/src/util/<a class="el" href="_falcon_device_boost_thread_8cpp.html">FalconDeviceBoostThread.cpp</a></ul>
</div>
<hr size="1"><address style="text-align: right;"><small>Generated on Sun Sep 20 12:24:32 2009 for libnifalcon by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.9 </small></address>
</body>
</html>
