<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>libnifalcon: libnifalcon::FalconComm Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.9 -->
<script type="text/javascript">
<!--
function changeDisplayState (e){
  var num=this.id.replace(/[^[0-9]/g,'');
  var button=this.firstChild;
  var sectionDiv=document.getElementById('dynsection'+num);
  if (sectionDiv.style.display=='none'||sectionDiv.style.display==''){
    sectionDiv.style.display='block';
    button.src='open.gif';
  }else{
    sectionDiv.style.display='none';
    button.src='closed.gif';
  }
}
function initDynSections(){
  var divs=document.getElementsByTagName('div');
  var sectionCounter=1;
  for(var i=0;i<divs.length-1;i++){
    if(divs[i].className=='dynheader'&&divs[i+1].className=='dynsection'){
      var header=divs[i];
      var section=divs[i+1];
      var button=header.firstChild;
      if (button!='IMG'){
        divs[i].insertBefore(document.createTextNode(' '),divs[i].firstChild);
        button=document.createElement('img');
        divs[i].insertBefore(button,divs[i].firstChild);
      }
      header.style.cursor='pointer';
      header.onclick=changeDisplayState;
      header.id='dynheader'+sectionCounter;
      button.src='closed.gif';
      section.id='dynsection'+sectionCounter;
      section.style.display='none';
      section.style.marginLeft='14px';
      sectionCounter++;
    }
  }
}
window.onload = initDynSections;
-->
</script>
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="main.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.html"><span>Classes</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.html"><span>Class&nbsp;List</span></a></li>
      <li><a href="hierarchy.html"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.html"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="namespacelibnifalcon.html">libnifalcon</a>::<a class="el" href="classlibnifalcon_1_1_falcon_comm.html">FalconComm</a>
  </div>
</div>
<div class="contents">
<h1>libnifalcon::FalconComm Class Reference<br>
<small>
[<a class="el" href="group___core_classes.html">Core Classes</a>,&nbsp;<a class="el" href="group___comm_classes.html">Communications Classes</a>]</small>
</h1><!-- doxytag: class="libnifalcon::FalconComm" --><!-- doxytag: inherits="libnifalcon::FalconCore" --><code>#include &lt;FalconComm.h&gt;</code>
<p>
Inherits <a class="el" href="classlibnifalcon_1_1_falcon_core.html">libnifalcon::FalconCore</a>.
<p>
Inherited by <a class="el" href="classlibnifalcon_1_1_falcon_comm_f_t_d2_x_x.html">libnifalcon::FalconCommFTD2XX</a>, and <a class="el" href="classlibnifalcon_1_1_falcon_comm_lib_u_s_b.html">libnifalcon::FalconCommLibUSB</a>.
<p>
<div class="dynheader">
Collaboration diagram for libnifalcon::FalconComm:</div>
<div class="dynsection">
<p><center><img src="classlibnifalcon_1_1_falcon_comm__coll__graph.png" border="0" usemap="#libnifalcon_1_1_falcon_comm__coll__map" alt="Collaboration graph"></center>
<map name="libnifalcon_1_1_falcon_comm__coll__map">
<area shape="rect" href="classlibnifalcon_1_1_falcon_core.html" title="libnifalcon::FalconCore" alt="" coords="11,7,181,33"></map>
<center><font size="2">[<a target="top" href="graph_legend.html">legend</a>]</font></center></div>

<p>
<a href="classlibnifalcon_1_1_falcon_comm-members.html">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Types</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">enum &nbsp;</td><td class="memItemRight" valign="bottom">{ <br>
&nbsp;&nbsp;<a class="el" href="classlibnifalcon_1_1_falcon_comm.html#37d38c64987755c3d532fc57441543d3406898f64e721893d33d7b941c007e8c">FALCON_COMM_DEVICE_ERROR</a> =  2000, 
<a class="el" href="classlibnifalcon_1_1_falcon_comm.html#37d38c64987755c3d532fc57441543d3a5876d557a20493b75c53ef71402e7c2">FALCON_COMM_NOT_INITIALIZED</a>, 
<a class="el" href="classlibnifalcon_1_1_falcon_comm.html#37d38c64987755c3d532fc57441543d31c85c3bebbe26139d404140f0d1afe50">FALCON_COMM_DEVICE_NOT_FOUND_ERROR</a>, 
<a class="el" href="classlibnifalcon_1_1_falcon_comm.html#37d38c64987755c3d532fc57441543d3fb3ac0657ee8d320cfe99a9ae51828ca">FALCON_COMM_DEVICE_NOT_VALID_ERROR</a>, 
<br>
&nbsp;&nbsp;<a class="el" href="classlibnifalcon_1_1_falcon_comm.html#37d38c64987755c3d532fc57441543d3186c5918b6b39a23208895f2070c7242">FALCON_COMM_DEVICE_INDEX_OUT_OF_RANGE_ERROR</a>, 
<a class="el" href="classlibnifalcon_1_1_falcon_comm.html#37d38c64987755c3d532fc57441543d324fea6ea3dbde4bbd503385d7805acb2">FALCON_COMM_FIRMWARE_NOT_FOUND_ERROR</a>, 
<a class="el" href="classlibnifalcon_1_1_falcon_comm.html#37d38c64987755c3d532fc57441543d37e11691ed61deb0d873311ef449ae63f">FALCON_COMM_WRITE_ERROR</a>, 
<a class="el" href="classlibnifalcon_1_1_falcon_comm.html#37d38c64987755c3d532fc57441543d3194996c45fb02df205029e95eeded88a">FALCON_COMM_READ_ERROR</a>
<br>
 }</td></tr>

<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_comm.html#3e5b0d847f71dc38fc6e3bf4cb537436">FalconComm</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_comm.html#032ed7b77a9183e967750c69566665bb">~FalconComm</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_comm.html#57e0a43b2a3c4216210da090554f0c66">getDeviceCount</a> (unsigned int &amp;count)=0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_comm.html#d5c93ddf6567f9b3df9e6e5b141787cf">open</a> (unsigned int index)=0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_comm.html#052c46652fbaf3beab2eb7bf403e807a">close</a> ()=0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_comm.html#1df9c365113f8f68896867b6c7ef4193">read</a> (uint8_t *str, unsigned int size)=0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_comm.html#55abce839e98733a99c3c9ddecac5880">write</a> (uint8_t *str, unsigned int size)=0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_comm.html#38d8ef91afa5c596eaaf4ed77a4ac45e">readBlocking</a> (uint8_t *str, unsigned int size)=0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_comm.html#9cd9973d534b5e4b34900480cbb4319b">writeBlocking</a> (uint8_t *str, unsigned int size)=0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_comm.html#8704b526c39c316eb79b58e31be0e276">setFirmwareMode</a> ()=0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_comm.html#b73c8cbb78003da970aa219fa9a00c9b">setNormalMode</a> ()=0</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_comm.html#6eb5f17ea84aada56b789f88ca99e0eb">getLastBytesRead</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_comm.html#df052285d72fa512698389385a945ae7">getLastBytesWritten</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_comm.html#a616033a261ce47ab8883a76550753a1">getDeviceErrorCode</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_comm.html#bcf69a07bcb777941348bfd2897e4589">isCommOpen</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_comm.html#56665e6f0debc900d1d1a2541b9b08ae">reset</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_comm.html#08ff61e16d08499fcf6532cbb6fdc694">hasBytesAvailable</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_comm.html#ae8d364806625a5108c9c92814af50cd">getBytesAvailable</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_comm.html#301d4dc30706c15eab3f9abca070d125">setBytesAvailable</a> (unsigned int <a class="el" href="namespacelibnifalcon.html#a2c2eba56ba33ecd1e35228fb5957f82">b</a>)</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_comm.html#b31121244e36bb46fafcdb6b4a4f0021">poll</a> ()</td></tr>

<tr><td colspan="2"><br><h2>Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_comm.html#01ef115798727b9bba62285060ab6f80">m_deviceErrorCode</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_comm.html#75034e420682e3efb7dddddd09b23a69">m_lastBytesRead</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_comm.html#73e842bab7f175c532594e5be425ca78">m_lastBytesWritten</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_comm.html#a2c911ee8752d31d7ec1d9335ed24f2f">m_isCommOpen</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_comm.html#33d27da61d89f8e97b03c282e93cbb50">m_hasBytesAvailable</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_comm.html#b383474a413bf9807a5aad67aade1c10">m_bytesAvailable</a></td></tr>

<tr><td colspan="2"><br><h2>Static Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static const unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_comm.html#baa91d4065ffd994530fef1dcacd2097">MAX_DEVICES</a> = 128</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static const unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_comm.html#43cbd74fbb955fa41e73a86326856a21">FALCON_VENDOR_ID</a> = 0x0403</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">static const unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classlibnifalcon_1_1_falcon_comm.html#5828cd47c14dacd5a5b55d6c5dab9afa">FALCON_PRODUCT_ID</a> = 0xCB48</td></tr>

</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
<a class="el" href="classlibnifalcon_1_1_falcon_comm.html">FalconComm</a> is the base class for all communications behavior implementations. The Falcon itself uses an FTDI chip to talk to the computer, so these will most likely be proxies to either an FTDI library (like FTD2XX), or reimplementation of FTDI calls (like our libusb implementation).<p>
<a class="el" href="classlibnifalcon_1_1_falcon_comm.html">FalconComm</a> is responsible for handling a few different tasks<ul>
<li>Getting the count of devices connected to the system</li><li>Opening and closing the connection to the device</li><li>Establishing modes (firmware and normal)</li><li>Reading data from and writing data to the device</li></ul>
<p>
All communications objects are considered to be non-blocking, and should reimplement a poll function to maintain this. Both FTD2XX and libusb, the two implementations of the <a class="el" href="classlibnifalcon_1_1_falcon_comm.html">FalconComm</a> class as of this writing, operate in a non-blocking way. If blocking calls are required (currently only used for loading firmware), blocking functions are provided but are specified as such to warn the user.<p>
As mentioned above, the falcon can operate in two modes<ul>
<li>Firmware - Used to load firmware to the device</li><li>Normal - Used to communicate with the device after firmware is loaded</li></ul>
<p>
To get the device into firmware mode, the follow set of steps needs to happen:<p>
<ol type=1>
<li>Clear send and receive buffers</li><li>Set FTDI latency timer to 16ms</li><li>Set line properties to 8N1</li><li>Set baud to 9600</li><li>Disable flow control</li><li>Set RTS low</li><li>Set DTR low</li><li>Set DTR high</li><li>Send 3 bytes: 0x0a 0x43 0x0d</li><li>Receive 5 bytes: 0x00 0xa 0x44 0x2c 0xd</li><li>Set DTR low</li><li>Set baud to new value (0x15 in control message)</li><li>Send 1 byte: 0x40</li><li>Receive 1 byte: 0x41</li></ol>
<p>
Once this set of commands has been run and the send/receives match what is listed above, we can continue with loading the firmware. The actual firmware loading simply consists of sending 128 byte blocks of the firmware to the device, and receiving back those blocks for error checking. This happens in the <a class="el" href="classlibnifalcon_1_1_falcon_firmware.html#074e31eb3a53f1ce113fb08bbfce6849">FalconFirmware::loadFirmware</a> function.<p>
Child classes of <a class="el" href="classlibnifalcon_1_1_falcon_comm.html">FalconComm</a> implement the above code in their <a class="el" href="classlibnifalcon_1_1_falcon_comm.html#8704b526c39c316eb79b58e31be0e276">setFirmwareMode()</a> function.<p>
Once firmware is loaded, the falcon needs to be returned to normal mode in order to exchange useful data with the driver. To do this, we execute the following steps:<p>
<ol type=1>
<li>Set the FTDI latency timer to 1ms</li><li>Set the baud rate to the appropriate value (0x2 in control message)</li><li>Clear send and receive buffers</li></ol>
<p>
After this, the falcon will be in normal communications mode, and regular I/O can begin. I/O specifics are defined in the firmware classes of <a class="el" href="namespacelibnifalcon.html">libnifalcon</a>.<p>
While <a class="el" href="classlibnifalcon_1_1_falcon_comm.html">FalconComm</a> is mainly geared toward making sure we can talk to the device, it can also be used for test purposes, like building network interfaces to emulate the falcon hardware. <hr><h2>Member Enumeration Documentation</h2>
<a class="anchor" name="37d38c64987755c3d532fc57441543d3"></a><!-- doxytag: member="libnifalcon::FalconComm::@0" ref="37d38c64987755c3d532fc57441543d3" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">anonymous enum          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
<dl compact><dt><b>Enumerator: </b></dt><dd>
<table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" name="37d38c64987755c3d532fc57441543d3406898f64e721893d33d7b941c007e8c"></a><!-- doxytag: member="FALCON_COMM_DEVICE_ERROR" ref="37d38c64987755c3d532fc57441543d3406898f64e721893d33d7b941c007e8c" args="" -->FALCON_COMM_DEVICE_ERROR</em>&nbsp;</td><td>
Device driver specific error, check getDeviceErrorCode </td></tr>
<tr><td valign="top"><em><a class="anchor" name="37d38c64987755c3d532fc57441543d3a5876d557a20493b75c53ef71402e7c2"></a><!-- doxytag: member="FALCON_COMM_NOT_INITIALIZED" ref="37d38c64987755c3d532fc57441543d3a5876d557a20493b75c53ef71402e7c2" args="" -->FALCON_COMM_NOT_INITIALIZED</em>&nbsp;</td><td>
Device drivers not initialized </td></tr>
<tr><td valign="top"><em><a class="anchor" name="37d38c64987755c3d532fc57441543d31c85c3bebbe26139d404140f0d1afe50"></a><!-- doxytag: member="FALCON_COMM_DEVICE_NOT_FOUND_ERROR" ref="37d38c64987755c3d532fc57441543d31c85c3bebbe26139d404140f0d1afe50" args="" -->FALCON_COMM_DEVICE_NOT_FOUND_ERROR</em>&nbsp;</td><td>
No devices found on the system </td></tr>
<tr><td valign="top"><em><a class="anchor" name="37d38c64987755c3d532fc57441543d3fb3ac0657ee8d320cfe99a9ae51828ca"></a><!-- doxytag: member="FALCON_COMM_DEVICE_NOT_VALID_ERROR" ref="37d38c64987755c3d532fc57441543d3fb3ac0657ee8d320cfe99a9ae51828ca" args="" -->FALCON_COMM_DEVICE_NOT_VALID_ERROR</em>&nbsp;</td><td>
Device not opened </td></tr>
<tr><td valign="top"><em><a class="anchor" name="37d38c64987755c3d532fc57441543d3186c5918b6b39a23208895f2070c7242"></a><!-- doxytag: member="FALCON_COMM_DEVICE_INDEX_OUT_OF_RANGE_ERROR" ref="37d38c64987755c3d532fc57441543d3186c5918b6b39a23208895f2070c7242" args="" -->FALCON_COMM_DEVICE_INDEX_OUT_OF_RANGE_ERROR</em>&nbsp;</td><td>
Device index for opening out of range of available devices </td></tr>
<tr><td valign="top"><em><a class="anchor" name="37d38c64987755c3d532fc57441543d324fea6ea3dbde4bbd503385d7805acb2"></a><!-- doxytag: member="FALCON_COMM_FIRMWARE_NOT_FOUND_ERROR" ref="37d38c64987755c3d532fc57441543d324fea6ea3dbde4bbd503385d7805acb2" args="" -->FALCON_COMM_FIRMWARE_NOT_FOUND_ERROR</em>&nbsp;</td><td>
Firmware file not found </td></tr>
<tr><td valign="top"><em><a class="anchor" name="37d38c64987755c3d532fc57441543d37e11691ed61deb0d873311ef449ae63f"></a><!-- doxytag: member="FALCON_COMM_WRITE_ERROR" ref="37d38c64987755c3d532fc57441543d37e11691ed61deb0d873311ef449ae63f" args="" -->FALCON_COMM_WRITE_ERROR</em>&nbsp;</td><td>
Write timeout hit, underflow, etc... </td></tr>
<tr><td valign="top"><em><a class="anchor" name="37d38c64987755c3d532fc57441543d3194996c45fb02df205029e95eeded88a"></a><!-- doxytag: member="FALCON_COMM_READ_ERROR" ref="37d38c64987755c3d532fc57441543d3194996c45fb02df205029e95eeded88a" args="" -->FALCON_COMM_READ_ERROR</em>&nbsp;</td><td>
Read timeout hit, underflow, etc... </td></tr>
</table>
</dl>

</div>
</div><p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="3e5b0d847f71dc38fc6e3bf4cb537436"></a><!-- doxytag: member="libnifalcon::FalconComm::FalconComm" ref="3e5b0d847f71dc38fc6e3bf4cb537436" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">libnifalcon::FalconComm::FalconComm           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Constructor 
</div>
</div><p>
<a class="anchor" name="032ed7b77a9183e967750c69566665bb"></a><!-- doxytag: member="libnifalcon::FalconComm::~FalconComm" ref="032ed7b77a9183e967750c69566665bb" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual libnifalcon::FalconComm::~FalconComm           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Destructor 
</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="052c46652fbaf3beab2eb7bf403e807a"></a><!-- doxytag: member="libnifalcon::FalconComm::close" ref="052c46652fbaf3beab2eb7bf403e807a" args="()=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool libnifalcon::FalconComm::close           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Closes the device, if open<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if device is closed successfully, false otherwise. Error code set if false. </dd></dl>

<p>Implemented in <a class="el" href="classlibnifalcon_1_1_falcon_comm_f_t_d2_x_x.html#ccba52caec137bf66faae36317095040">libnifalcon::FalconCommFTD2XX</a>, and <a class="el" href="classlibnifalcon_1_1_falcon_comm_lib_u_s_b.html#155a9c3ce47b84ab5c72d19e31c57e3d">libnifalcon::FalconCommLibUSB</a>.</p>

</div>
</div><p>
<a class="anchor" name="ae8d364806625a5108c9c92814af50cd"></a><!-- doxytag: member="libnifalcon::FalconComm::getBytesAvailable" ref="ae8d364806625a5108c9c92814af50cd" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int libnifalcon::FalconComm::getBytesAvailable           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the number of bytes available to read (buffered from object)<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Number of bytes available to read </dd></dl>

</div>
</div><p>
<a class="anchor" name="57e0a43b2a3c4216210da090554f0c66"></a><!-- doxytag: member="libnifalcon::FalconComm::getDeviceCount" ref="57e0a43b2a3c4216210da090554f0c66" args="(unsigned int &amp;count)=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool libnifalcon::FalconComm::getDeviceCount           </td>
          <td>(</td>
          <td class="paramtype">unsigned int &amp;&nbsp;</td>
          <td class="paramname"> <em>count</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the number of devices connected to the system<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[out]</tt>&nbsp;</td><td valign="top"><em>count</em>&nbsp;</td><td>The number of devices available</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if count was retreived correctly, false otherwise. Error code set if false. </dd></dl>

<p>Implemented in <a class="el" href="classlibnifalcon_1_1_falcon_comm_f_t_d2_x_x.html#5c12813beb807c1970b9de786fc6e923">libnifalcon::FalconCommFTD2XX</a>, and <a class="el" href="classlibnifalcon_1_1_falcon_comm_lib_u_s_b.html#abbdb7441df3342b00c4f34c956e8f84">libnifalcon::FalconCommLibUSB</a>.</p>

</div>
</div><p>
<a class="anchor" name="a616033a261ce47ab8883a76550753a1"></a><!-- doxytag: member="libnifalcon::FalconComm::getDeviceErrorCode" ref="a616033a261ce47ab8883a76550753a1" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int libnifalcon::FalconComm::getDeviceErrorCode           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the device specific error code for in-depth debugging<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Index for the communication policy specific error code </dd></dl>

</div>
</div><p>
<a class="anchor" name="6eb5f17ea84aada56b789f88ca99e0eb"></a><!-- doxytag: member="libnifalcon::FalconComm::getLastBytesRead" ref="6eb5f17ea84aada56b789f88ca99e0eb" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int libnifalcon::FalconComm::getLastBytesRead           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the number of bytes returned in the last read function<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Number of bytes read </dd></dl>

</div>
</div><p>
<a class="anchor" name="df052285d72fa512698389385a945ae7"></a><!-- doxytag: member="libnifalcon::FalconComm::getLastBytesWritten" ref="df052285d72fa512698389385a945ae7" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int libnifalcon::FalconComm::getLastBytesWritten           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the number of bytes returned in the last write function<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Number of bytes written </dd></dl>

</div>
</div><p>
<a class="anchor" name="08ff61e16d08499fcf6532cbb6fdc694"></a><!-- doxytag: member="libnifalcon::FalconComm::hasBytesAvailable" ref="08ff61e16d08499fcf6532cbb6fdc694" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool libnifalcon::FalconComm::hasBytesAvailable           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Checks to see whether there are bytes available to read from the object<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if comm object has bytes available to read </dd></dl>

</div>
</div><p>
<a class="anchor" name="bcf69a07bcb777941348bfd2897e4589"></a><!-- doxytag: member="libnifalcon::FalconComm::isCommOpen" ref="bcf69a07bcb777941348bfd2897e4589" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool libnifalcon::FalconComm::isCommOpen           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns whether the device is open or not<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if open, false otherwise </dd></dl>

</div>
</div><p>
<a class="anchor" name="d5c93ddf6567f9b3df9e6e5b141787cf"></a><!-- doxytag: member="libnifalcon::FalconComm::open" ref="d5c93ddf6567f9b3df9e6e5b141787cf" args="(unsigned int index)=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool libnifalcon::FalconComm::open           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>index</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Opens the device at the specified index<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>index</em>&nbsp;</td><td>Index of the device to open</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if device is opened successfully, false otherwise. Error code set if false. </dd></dl>

<p>Implemented in <a class="el" href="classlibnifalcon_1_1_falcon_comm_f_t_d2_x_x.html#72a1f485dc6d74e39023315a710e1407">libnifalcon::FalconCommFTD2XX</a>, and <a class="el" href="classlibnifalcon_1_1_falcon_comm_lib_u_s_b.html#8a0b192c90182398e29f1f4656658036">libnifalcon::FalconCommLibUSB</a>.</p>

</div>
</div><p>
<a class="anchor" name="b31121244e36bb46fafcdb6b4a4f0021"></a><!-- doxytag: member="libnifalcon::FalconComm::poll" ref="b31121244e36bb46fafcdb6b4a4f0021" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void libnifalcon::FalconComm::poll           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Polls the object for confirmation of write/read return 
<p>Reimplemented in <a class="el" href="classlibnifalcon_1_1_falcon_comm_f_t_d2_x_x.html#8b600f869be76382da282a9d90117b09">libnifalcon::FalconCommFTD2XX</a>, and <a class="el" href="classlibnifalcon_1_1_falcon_comm_lib_u_s_b.html#aa3739b48ffb6d9f4b586c6f803caab4">libnifalcon::FalconCommLibUSB</a>.</p>

</div>
</div><p>
<a class="anchor" name="1df9c365113f8f68896867b6c7ef4193"></a><!-- doxytag: member="libnifalcon::FalconComm::read" ref="1df9c365113f8f68896867b6c7ef4193" args="(uint8_t *str, unsigned int size)=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool libnifalcon::FalconComm::read           </td>
          <td>(</td>
          <td class="paramtype">uint8_t *&nbsp;</td>
          <td class="paramname"> <em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>size</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Read a specified number of bytes from the device<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[out]</tt>&nbsp;</td><td valign="top"><em>str</em>&nbsp;</td><td>Buffer to read data into </td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>size</em>&nbsp;</td><td>Amount of bytes to read</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if (size) amount of bytes is read successfully, false otherwise. Error code set if false. </dd></dl>

<p>Implemented in <a class="el" href="classlibnifalcon_1_1_falcon_comm_f_t_d2_x_x.html#48072283b4de91c32eb842ecf72333c4">libnifalcon::FalconCommFTD2XX</a>, and <a class="el" href="classlibnifalcon_1_1_falcon_comm_lib_u_s_b.html#dd1fe9385245425283d1a767e57b73da">libnifalcon::FalconCommLibUSB</a>.</p>

</div>
</div><p>
<a class="anchor" name="38d8ef91afa5c596eaaf4ed77a4ac45e"></a><!-- doxytag: member="libnifalcon::FalconComm::readBlocking" ref="38d8ef91afa5c596eaaf4ed77a4ac45e" args="(uint8_t *str, unsigned int size)=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool libnifalcon::FalconComm::readBlocking           </td>
          <td>(</td>
          <td class="paramtype">uint8_t *&nbsp;</td>
          <td class="paramname"> <em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>size</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Read a specified number of bytes from the device<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[out]</tt>&nbsp;</td><td valign="top"><em>str</em>&nbsp;</td><td>Buffer to read data into </td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>size</em>&nbsp;</td><td>Amount of bytes to read</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if (size) amount of bytes is read successfully, false otherwise. Error code set if false. </dd></dl>

<p>Implemented in <a class="el" href="classlibnifalcon_1_1_falcon_comm_f_t_d2_x_x.html#426e04660aa1861cd855e5c9ae1f60f8">libnifalcon::FalconCommFTD2XX</a>, and <a class="el" href="classlibnifalcon_1_1_falcon_comm_lib_u_s_b.html#e9459b98b621bc9fa5236cd1efa788bb">libnifalcon::FalconCommLibUSB</a>.</p>

</div>
</div><p>
<a class="anchor" name="56665e6f0debc900d1d1a2541b9b08ae"></a><!-- doxytag: member="libnifalcon::FalconComm::reset" ref="56665e6f0debc900d1d1a2541b9b08ae" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void libnifalcon::FalconComm::reset           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Reset the internal state of the communications object (bytes read/written, etc...) 
<p>Reimplemented in <a class="el" href="classlibnifalcon_1_1_falcon_comm_lib_u_s_b.html#ac5df8047265fbd51018bbf9e4208cd3">libnifalcon::FalconCommLibUSB</a>.</p>

</div>
</div><p>
<a class="anchor" name="301d4dc30706c15eab3f9abca070d125"></a><!-- doxytag: member="libnifalcon::FalconComm::setBytesAvailable" ref="301d4dc30706c15eab3f9abca070d125" args="(unsigned int b)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void libnifalcon::FalconComm::setBytesAvailable           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>b</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Sets the number of bytes that are ready for reading<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Number of bytes available to read </dd></dl>

</div>
</div><p>
<a class="anchor" name="8704b526c39c316eb79b58e31be0e276"></a><!-- doxytag: member="libnifalcon::FalconComm::setFirmwareMode" ref="8704b526c39c316eb79b58e31be0e276" args="()=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool libnifalcon::FalconComm::setFirmwareMode           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Sets the communications mode and initializes the device to load firmware<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if device is successfully set to load firwmare, false otherwise. Error code set if false. </dd></dl>

<p>Implemented in <a class="el" href="classlibnifalcon_1_1_falcon_comm_f_t_d2_x_x.html#a9b2820722229de0c1ce049621a9510d">libnifalcon::FalconCommFTD2XX</a>, and <a class="el" href="classlibnifalcon_1_1_falcon_comm_lib_u_s_b.html#3a718c9c5daab8b090b38344a9a820eb">libnifalcon::FalconCommLibUSB</a>.</p>

</div>
</div><p>
<a class="anchor" name="b73c8cbb78003da970aa219fa9a00c9b"></a><!-- doxytag: member="libnifalcon::FalconComm::setNormalMode" ref="b73c8cbb78003da970aa219fa9a00c9b" args="()=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool libnifalcon::FalconComm::setNormalMode           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Sets the communications mode and initializes the device to run in normal operation<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if device is successfully set to normal operation, false otherwise. Error code set if false. </dd></dl>

<p>Implemented in <a class="el" href="classlibnifalcon_1_1_falcon_comm_f_t_d2_x_x.html#e0d9afd46cd254767dd636b154b6e678">libnifalcon::FalconCommFTD2XX</a>, and <a class="el" href="classlibnifalcon_1_1_falcon_comm_lib_u_s_b.html#0285cc5b0e7d384ff6385d029709fc26">libnifalcon::FalconCommLibUSB</a>.</p>

</div>
</div><p>
<a class="anchor" name="55abce839e98733a99c3c9ddecac5880"></a><!-- doxytag: member="libnifalcon::FalconComm::write" ref="55abce839e98733a99c3c9ddecac5880" args="(uint8_t *str, unsigned int size)=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool libnifalcon::FalconComm::write           </td>
          <td>(</td>
          <td class="paramtype">uint8_t *&nbsp;</td>
          <td class="paramname"> <em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>size</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Write a specified number of bytes to the device<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>str</em>&nbsp;</td><td>Buffer to write data from </td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>size</em>&nbsp;</td><td>Amount of bytes to write</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if (size) amount of bytes is written successfully, false otherwise. Error code set if false. </dd></dl>

<p>Implemented in <a class="el" href="classlibnifalcon_1_1_falcon_comm_f_t_d2_x_x.html#58c54341ca3572bd83dd772b24f61935">libnifalcon::FalconCommFTD2XX</a>, and <a class="el" href="classlibnifalcon_1_1_falcon_comm_lib_u_s_b.html#611fe6139a4ecfb7bdc4022649882265">libnifalcon::FalconCommLibUSB</a>.</p>

</div>
</div><p>
<a class="anchor" name="9cd9973d534b5e4b34900480cbb4319b"></a><!-- doxytag: member="libnifalcon::FalconComm::writeBlocking" ref="9cd9973d534b5e4b34900480cbb4319b" args="(uint8_t *str, unsigned int size)=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool libnifalcon::FalconComm::writeBlocking           </td>
          <td>(</td>
          <td class="paramtype">uint8_t *&nbsp;</td>
          <td class="paramname"> <em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>size</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Write a specified number of bytes to the device<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>str</em>&nbsp;</td><td>Buffer to write data from </td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>size</em>&nbsp;</td><td>Amount of bytes to write</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if (size) amount of bytes is written successfully, false otherwise. Error code set if false. </dd></dl>

<p>Implemented in <a class="el" href="classlibnifalcon_1_1_falcon_comm_f_t_d2_x_x.html#f31357ce00d14f5e8d9d3165fa0ece64">libnifalcon::FalconCommFTD2XX</a>, and <a class="el" href="classlibnifalcon_1_1_falcon_comm_lib_u_s_b.html#e88fc0095793dd0e22cffc38facbe6b0">libnifalcon::FalconCommLibUSB</a>.</p>

</div>
</div><p>
<hr><h2>Member Data Documentation</h2>
<a class="anchor" name="5828cd47c14dacd5a5b55d6c5dab9afa"></a><!-- doxytag: member="libnifalcon::FalconComm::FALCON_PRODUCT_ID" ref="5828cd47c14dacd5a5b55d6c5dab9afa" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const unsigned int <a class="el" href="classlibnifalcon_1_1_falcon_comm.html#5828cd47c14dacd5a5b55d6c5dab9afa">libnifalcon::FalconComm::FALCON_PRODUCT_ID</a> = 0xCB48<code> [static, protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
USB Product ID from the Falcon 
</div>
</div><p>
<a class="anchor" name="43cbd74fbb955fa41e73a86326856a21"></a><!-- doxytag: member="libnifalcon::FalconComm::FALCON_VENDOR_ID" ref="43cbd74fbb955fa41e73a86326856a21" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const unsigned int <a class="el" href="classlibnifalcon_1_1_falcon_comm.html#43cbd74fbb955fa41e73a86326856a21">libnifalcon::FalconComm::FALCON_VENDOR_ID</a> = 0x0403<code> [static, protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
USB Vendor ID for the Falcon 
</div>
</div><p>
<a class="anchor" name="b383474a413bf9807a5aad67aade1c10"></a><!-- doxytag: member="libnifalcon::FalconComm::m_bytesAvailable" ref="b383474a413bf9807a5aad67aade1c10" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classlibnifalcon_1_1_falcon_comm.html#b383474a413bf9807a5aad67aade1c10">libnifalcon::FalconComm::m_bytesAvailable</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Number of bytes object has available to read 
</div>
</div><p>
<a class="anchor" name="01ef115798727b9bba62285060ab6f80"></a><!-- doxytag: member="libnifalcon::FalconComm::m_deviceErrorCode" ref="01ef115798727b9bba62285060ab6f80" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classlibnifalcon_1_1_falcon_comm.html#01ef115798727b9bba62285060ab6f80">libnifalcon::FalconComm::m_deviceErrorCode</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Communications policy specific error code 
</div>
</div><p>
<a class="anchor" name="33d27da61d89f8e97b03c282e93cbb50"></a><!-- doxytag: member="libnifalcon::FalconComm::m_hasBytesAvailable" ref="33d27da61d89f8e97b03c282e93cbb50" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classlibnifalcon_1_1_falcon_comm.html#33d27da61d89f8e97b03c282e93cbb50">libnifalcon::FalconComm::m_hasBytesAvailable</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Whether or not the object has bytes available to read 
</div>
</div><p>
<a class="anchor" name="a2c911ee8752d31d7ec1d9335ed24f2f"></a><!-- doxytag: member="libnifalcon::FalconComm::m_isCommOpen" ref="a2c911ee8752d31d7ec1d9335ed24f2f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classlibnifalcon_1_1_falcon_comm.html#a2c911ee8752d31d7ec1d9335ed24f2f">libnifalcon::FalconComm::m_isCommOpen</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Whether or not the communications are open 
</div>
</div><p>
<a class="anchor" name="75034e420682e3efb7dddddd09b23a69"></a><!-- doxytag: member="libnifalcon::FalconComm::m_lastBytesRead" ref="75034e420682e3efb7dddddd09b23a69" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classlibnifalcon_1_1_falcon_comm.html#75034e420682e3efb7dddddd09b23a69">libnifalcon::FalconComm::m_lastBytesRead</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Number of bytes read in last read operation 
</div>
</div><p>
<a class="anchor" name="73e842bab7f175c532594e5be425ca78"></a><!-- doxytag: member="libnifalcon::FalconComm::m_lastBytesWritten" ref="73e842bab7f175c532594e5be425ca78" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classlibnifalcon_1_1_falcon_comm.html#73e842bab7f175c532594e5be425ca78">libnifalcon::FalconComm::m_lastBytesWritten</a><code> [protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Number of bytes written in the last write operation 
</div>
</div><p>
<a class="anchor" name="baa91d4065ffd994530fef1dcacd2097"></a><!-- doxytag: member="libnifalcon::FalconComm::MAX_DEVICES" ref="baa91d4065ffd994530fef1dcacd2097" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const unsigned int <a class="el" href="classlibnifalcon_1_1_falcon_comm.html#baa91d4065ffd994530fef1dcacd2097">libnifalcon::FalconComm::MAX_DEVICES</a> = 128<code> [static, protected]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Maximum number of devices to store in count buffers 
</div>
</div><p>
<hr>The documentation for this class was generated from the following file:<ul>
<li>local/libnifalcon-1.0.1/include/falcon/core/<a class="el" href="_falcon_comm_8h.html">FalconComm.h</a></ul>
</div>
<hr size="1"><address style="text-align: right;"><small>Generated on Sun Sep 20 12:24:29 2009 for libnifalcon by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.9 </small></address>
</body>
</html>
